<Project>
	<UsingTask TaskName="CreateModInfo"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Type ParameterType="System.String" />
			<Name ParameterType="System.String" Required="true" />
			<ModId ParameterType="System.String" />
			<Version ParameterType="System.String" Required="true" />
			<NetworkVersion ParameterType="System.String" />
			<Description ParameterType="System.String" />
			<Website ParameterType="System.String" />
			<Authors ParameterType="System.String" Required="true" />
			<Contributors ParameterType="System.String" />
			<Side ParameterType="System.String" />
			<RequiredOnClient ParameterType="System.Boolean" />
			<RequiredOnServer ParameterType="System.Boolean" />
			<GameVersion ParameterType="System.String" Required="true" />
			<Dependencies ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
			<OutputPath ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.Text"/>
			<Using Namespace="System.Text.RegularExpressions"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
                    var sb = new StringBuilder();
                    sb.AppendLine("{");
                    
                    if (string.IsNullOrWhiteSpace(Type))
                    {
                        sb.AppendLine("\t\"type\": \"Code\",");
                    }
                    else
                    {
                        sb.AppendLine("\t\"type\": \"" + Type + "\",");
                    }
                    
                    sb.AppendLine("\t\"name\": \"" + Name + "\",");

                    if (string.IsNullOrWhiteSpace(ModId))
                    {
                        ModId = Name.ToLower();
                        ModId = Regex.Replace(ModId, "[^a-z0-9]", "");
                    }
                    sb.AppendLine("\t\"modid\": \"" + ModId + "\",");
                    
                    sb.AppendLine("\t\"version\": \"" + Version + "\",");

                    if (!string.IsNullOrWhiteSpace(NetworkVersion))
                    {
                        sb.AppendLine("\t\"networkVersion\": \"" + NetworkVersion + "\",");
                    }

                    if (!string.IsNullOrWhiteSpace(Description))
                    {
                        sb.AppendLine("\t\"description\": \"" + Description + "\",");
                    }

                    if (!string.IsNullOrWhiteSpace(Website))
                    {
                        sb.AppendLine("\t\"website\": \"" + Website + "\",");
                    }

                    if (!string.IsNullOrWhiteSpace(Authors))
                    {
                        Authors = string.Join(", ", Authors.Split(',').Select(e => "\"" + e.Trim() + "\""));
                        sb.AppendLine("\t\"authors\": [" + Authors + "],");
                    }

                    if (!string.IsNullOrWhiteSpace(Contributors))
                    {
                        Contributors = string.Join(", ", Contributors.Split(',').Select(e => "\"" + e.Trim() + "\""));
                        sb.AppendLine("\t\"contributors\": [" + Contributors + "],");
                    }

                    if (!string.IsNullOrWhiteSpace(Side))
                    {
                        sb.AppendLine("\t\"side\": \"" + Side + "\",");
                        if (Side == "Universal" && !(RequiredOnClient && RequiredOnServer))
                        {
                            sb.AppendLine("\t\"requiredOnClient\": " + RequiredOnClient.ToString().ToLower() + ",");
                            sb.AppendLine("\t\"requiredOnServer\": " + RequiredOnServer.ToString().ToLower() + ",");
                        }
                    }

                    sb.AppendLine("\t\"dependencies\": {");
                    sb.Append("\t\t\"game\": \"" + GameVersion + "\"");
                    if (Dependencies != null)
                    {
                        foreach (var dependency in Dependencies)
                        {                           
                            string modid = dependency.ItemSpec;
                            string version = dependency.GetMetadata("Version");
                            sb.AppendLine(",");
                            sb.Append("\t\t\"" + modid + "\": \"" + version + "\"");
                        }
                    }
                    sb.AppendLine();
                    sb.AppendLine("\t}");

                    sb.AppendLine("}");

                    if (!Directory.Exists(OutputPath))
                    {
                        Directory.CreateDirectory(OutputPath);
                    }
                    File.WriteAllText(OutputPath + "modinfo.json", sb.ToString());
                ]]>
			</Code>
		</Task>
	</UsingTask>

	<UsingTask TaskName="ResolveDependency"
               TaskFactory="RoslynCodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<ModId ParameterType="System.String" Required="true" />
			<Version ParameterType="System.String" Required="true" />
			<JsonFileDirectory ParameterType="System.String" Required="true" />
			<DownloadMod ParameterType="Microsoft.Build.Framework.ITaskItem" Output="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Memory" />
			<Reference Include="System.Text.Json" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.Json" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
                    string json = File.ReadAllText(JsonFileDirectory + "/" + ModId + "_v" + Version + ".json");
                    string url = null;
                    
                    using (JsonDocument doc = JsonDocument.Parse(json))
                    {
                        var root = doc.RootElement;
                        if (root.TryGetProperty("statuscode", out var statusCodeElement) && statusCodeElement.GetString() == "200")
                        {
                            if (root.TryGetProperty("mod", out var modElement) && modElement.TryGetProperty("releases", out var releasesElement))
                            {
                                foreach (var release in releasesElement.EnumerateArray())
                                {
                                    if (release.TryGetProperty("modversion", out var modVersionElement) && modVersionElement.GetString() == Version)
                                    {
                                        if (release.TryGetProperty("mainfile", out var mainFileElement))
                                        {
                                            url = "https://mods.vintagestory.at/" + mainFileElement.GetString(); 
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (url != null)
                    {
                        DownloadMod = new TaskItem(ModId);
                        DownloadMod.SetMetadata("Url", url);
                    }
                    else
                    {
                        Log.LogError("Unknown dependency: " + ModId + "@" + Version);
                    }
                ]]>
			</Code>
		</Task>
	</UsingTask>

	<Target Name="Prepare" AfterTargets="PreBuildEvent">
		<MakeDir Directories="$(AssetsDir)" />
		<RemoveDir Directories="$(OutputPath)/" />
		<MakeDir Directories="$(OutputPath)/" />

		<!-- Create modinfo.json -->
		<CreateModInfo
            Type="$(Type)"
            Name="$(Name)"
            ModId="$(ModId)"
            Version="$(Version)"
            NetworkVersion="$(NetworkVersion)"
            Description="$(Description)"
            Website="$(Website)"
            Authors="$(Authors)"
            Contributors="$(Contributors)"
            Side="$(Side)"
            RequiredOnClient="$(RequiredOnClient)"
            RequiredOnServer="$(RequiredOnServer)"
            GameVersion="$(MinimalGameVersion)"
            Dependencies="@(Dependencies)"
            OutputPath="$(OutputPath)" />
	</Target>

	<!-- Move assets to output folder -->
	<Target Name="AddAssets">
		<ItemGroup>
			<Assets Include="$(AssetsDir)/**" />
		</ItemGroup>
		<MakeDir Directories="$(OutputPath)assets" Condition=" $(Assets) != '' " />
		<Copy SourceFiles="@(Assets)" DestinationFolder="$(OutputPath)assets/%(RecursiveDir)" />
	</Target>

	<!-- Create .zip in Releases -->
	<Target Name="MakeZip">
		<PropertyGroup>
			<ReleaseName>$(TargetName)_VS$(GameVersion)_$(TargetFramework)_v$(Version).zip</ReleaseName>
		</PropertyGroup>
		<MakeDir Directories="$(ReleasesDir)" />
		<ZipDirectory DestinationFile="$(ReleasesDir)/$(ReleaseName)"
                      SourceDirectory="$(OutputPath)"
                      Overwrite="true" />
		<Message Text="Created release $(ReleaseName)" Importance="High" />
	</Target>

	<!-- Update lang files from crowdin -->
	<Target Name="UpdateLang">
		<PropertyGroup>
			<CrowdinFileName>$(ModId)-$([System.String]::Copy('$(Authors)').ToLower()).zip</CrowdinFileName>
			<CrowdinZipUrl>https://www.dropbox.com/scl/fo/q7u3idxz3edsytki8n6m4/h/$(CrowdinFileName)?dl=1&amp;rlkey=mc3xn22a49qwrjp5cmx1he0ay</CrowdinZipUrl>
		</PropertyGroup>

		<DownloadFile
            SourceUrl="$(CrowdinZipUrl)"
            DestinationFolder="$(IntermediateOutputPath)"
            DestinationFileName="$(CrowdinFileName)"
            ContinueOnError="WarnAndContinue">
			<Output TaskParameter="DownloadedFile" ItemName="CrowdinZipName" />
		</DownloadFile>

		<Unzip Condition=" '@(CrowdinZipName)' != ''" SourceFiles="@(CrowdinZipName)" DestinationFolder="$(AssetsDir)/$(ModId)/lang" />
		<Message Condition=" '@(CrowdinZipName)' != ''" Text="Updated lang files from crowdin" Importance="High" />

		<Warning Condition=" '@(CrowdinZipName)' == ''" Text="Failed update lang files. No $(CrowdinFileName) on crowdin dropbox?" />
	</Target>

	<!-- Download dependecies -->
	<Target Name="DownloadDependencies" BeforeTargets="PreBuildEvent" Condition=" '@(Dependencies)' != '' ">
		<Message Text="Deps:@(Dependencies -> ' %(Identity)@%(Version)')" Importance="High" />

		<PropertyGroup>
			<ModdbApiRequestFolder>$(IntermediateOutputPath)/moddbapi</ModdbApiRequestFolder>
		</PropertyGroup>

		<!-- Damn MSBuild inline tasks and web requests. I had to download it to file o.O -->
		<DownloadFile
            SourceUrl="https://mods.vintagestory.at/api/mod/@(Dependencies)"
            DestinationFolder="$(ModdbApiRequestFolder)"
            DestinationFileName="%(Identity)_v%(Version).json"
            ContinueOnError="WarnAndContinue">
		</DownloadFile>

		<ResolveDependency
            ModId="%(Dependencies.Identity)"
            Version="%(Dependencies.Version)"
            JsonFileDirectory="$(ModdbApiRequestFolder)"
            ContinueOnError="WarnAndContinue">
			<Output TaskParameter="DownloadMod" ItemName="DownloadMods" />
		</ResolveDependency>

		<DownloadFile
            Condition=" '@(DownloadMods)' != '' "
            SourceUrl="%(Url)"
            DestinationFolder="$(IntermediateOutputPath)/mods"
            ContinueOnError="WarnAndContinue">
			<Output TaskParameter="DownloadedFile" ItemName="DownloadedFiles" />
		</DownloadFile>

		<RemoveDir Directories="@(DownloadMods -> '$(ModsDir)/%Identity')" />
		<Unzip Condition=" '@(DownloadedFiles)' != '' " SourceFiles="@(DownloadedFiles)" DestinationFolder="@(DownloadMods -> '$(ModsDir)/%Identity')" />
		<Delete Files="@(DownloadedFiles)" />

		<!-- May be not included in props -->
		<ItemGroup>
			<Reference Include="$(ModsDir)/**/*.dll" Exclude="$(OutputPath)*.dll">
				<Private>false</Private>
			</Reference>
		</ItemGroup>
	</Target>

	<!-- Call it by external tool for package mod -->
	<Target Name="PackageMod" DependsOnTargets="Restore;Build;UpdateLang;AddAssets;MakeZip" />

	<!-- Build in Publish mode for package mod -->
	<Target Name="PackageModIfPublish"
            AfterTargets="PostBuildEvent"
            Condition=" '$(Configuration)' == 'Publish'">
		<CallTarget Targets="UpdateLang;AddAssets;MakeZip" />
	</Target>
</Project>
